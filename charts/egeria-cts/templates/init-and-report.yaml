# SPDX-License-Identifier: Apache-2.0
# Copyright Contributors to the Egeria project.
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-init-and-report
  labels:
    app.kubernetes.io/name: {{ include "myapp.name" . }}
    helm.sh/chart: {{ include "myapp.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/component: init-and-report

spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "myapp.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
      app.kubernetes.io/component: init-and-report
  strategy: {}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "myapp.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/component: init-and-report
    spec:
      affinity:
        podAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: app.kubernetes.io/instance
                    operator: In
                    values:
                      - {{ .Release.Name }}
              topologyKey: "kubernetes.io/hostname"
      serviceAccountName: {{ .Release.Name }}-cts
      # Wait for all services to be up before attempting initial configuration
      initContainers:
          - name: wait-for-platform
            image: "{{ if (.Values.image.configure.registry | default .Values.imageDefaults.registry) }}{{ .Values.image.configure.registry | default .Values.imageDefaults.registry }}/{{ end }}\
                  {{ if (.Values.image.configure.namespace | default .Values.imageDefaults.namespace) }}{{ .Values.image.configure.namespace | default .Values.imageDefaults.namespace }}/{{ end }}\
                  {{ .Values.image.configure.name }}\
                  :{{ .Values.image.configure.tag | default .Values.imageDefaults.tag }}"
            imagePullPolicy: {{ .Values.image.configure.pullPolicy | default .Values.imageDefaults.pullPolicy }}
            env:
              - name: SERVICE
                value: {{ .Release.Name }}-platform
          - name: wait-for-kafka
            image: "{{ if (.Values.image.configure.registry | default .Values.imageDefaults.registry) }}{{ .Values.image.configure.registry | default .Values.imageDefaults.registry }}/{{ end }}\
                  {{ if (.Values.image.configure.namespace | default .Values.imageDefaults.namespace) }}{{ .Values.image.configure.namespace | default .Values.imageDefaults.namespace }}/{{ end }}\
                  {{ .Values.image.configure.name }}\
                  :{{ .Values.image.configure.tag | default .Values.imageDefaults.tag }}"
            imagePullPolicy: {{ .Values.image.configure.pullPolicy | default .Values.imageDefaults.pullPolicy }}
            env:
              - name: SERVICE
                value: {{ .Release.Name }}-kafka
      # Then configure and startup the CTS, and eventually produce the reports
      containers:
        - name: init-and-report
          image: "{{ if (.Values.image.configure.registry | default .Values.imageDefaults.registry) }}{{ .Values.image.configure.registry | default .Values.imageDefaults.registry }}/{{ end }}\
                  {{ if (.Values.image.configure.namespace | default .Values.imageDefaults.namespace) }}{{ .Values.image.configure.namespace | default .Values.imageDefaults.namespace }}/{{ end }}\
                  {{ .Values.image.configure.name }}\
                  :{{ .Values.image.configure.tag | default .Values.imageDefaults.tag }}"
          imagePullPolicy: {{ .Values.image.configure.pullPolicy | default .Values.imageDefaults.pullPolicy }}
          envFrom:
            - configMapRef:
                name: {{ .Release.Name }}-env
          command:
            - "/bin/bash"
            - "-c"
            - >
                /scripts/config-egeria.sh &&
                /scripts/run-cts.sh &&
                /scripts/collect-results.sh &&
                tail -f /dev/null
          resources:
            requests:
              memory: "16Mi"
              cpu: "100m"
            limits:
              memory: "64Mi"
              cpu: "500m"
          volumeMounts:
            - name: scripts-vol
              mountPath: /scripts
      volumes:
        - name: scripts-vol
          configMap:
            name: {{ .Release.Name }}-scripts-configmap
            defaultMode: 0755

status: {}
...
